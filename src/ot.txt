// configure.ts
import Enquirer from 'enquirer';
import Providers from "./providers";
import {ensureConfigFile} from "./utils";
import fs from "fs";

export async function configure() {


    const {provider} = await Enquirer.prompt<{ provider: keyof typeof Providers }>({
        type: 'select',
        name: 'provider',
        message: 'Please Choose AI Provider:',
        choices: Object.keys(Providers)
    });

    const {model, apiKey} = await Enquirer.prompt<{ model: string, apiKey: string }>([{
        type: 'select',
        name: 'model',
        message: 'Please Choose Model:',
        choices: Providers[provider].models
    }, {
        type: "password",
        name: "apiKey",
        message: "Please enter your API Key:"
    }]);

    const configFilePath = ensureConfigFile();

    // Writing
    fs.writeFileSync(configFilePath, JSON.stringify({
        provider,
        model,
        apiKey
    }, null, 2));

    console.log(`Configuration saved to ${configFilePath}`);
}

// generate.ts
import {ensureConfigFile} from "./utils";
import {generateText} from "ai";
import {execSync} from "node:child_process";
import {readFile} from "fs/promises";
import {z} from "zod";
import providers from "./providers";
import Enquirer from 'enquirer';

// Constants
const COMMIT_PROMPT = `Your job is to write GitHub commit for this diff. Only send the commit message. Format:

[<type>] <Title>
- Detail 1
- Detail 2
- Detail 3
- Details 4
... <Conclusion>

Make sure to include the type of commit (feat, fix, docs, style, refactor, test, chore etc...) in square brackets.
Make sure you follow format strictly unless told otherwise.
Make sure message is well detailed and has every change mentioned in the diff.
*If no diff is there, send 'No Changed Detected.'*`;

// Config validation schema
const configSchema = z.object({
    provider: z.string(),
    model: z.string(),
    apiKey: z.string()
});

// Helper functions
const getDiff = (): string => {
    try {
        return execSync("git --no-pager diff", {encoding: 'utf8'});
    } catch (error) {
        throw new Error(`Failed to get git diff: ${error}`);
    }
};

const loadConfig = async (configPath: string) => {
    try {
        const configData = await readFile(configPath, 'utf8');
        const config = JSON.parse(configData);
        return configSchema.parse(config);
    } catch (error) {
        throw new Error(`Failed to load config: ${error}`);
    }
};

const initializeAIProvider = async (config: z.infer<typeof configSchema>) => {
    try {
        const providerInfo = providers[config.provider as keyof typeof providers];
        if (!providerInfo) {
            throw new Error(`Unsupported provider: ${config.provider}`);
        }

        const providerPkg = await import(`@ai-sdk/${providerInfo.id}`);
        const creatorName = `create${config.provider.replace(/\s/g, '')}`;
        const creator = providerPkg[creatorName];

        if (typeof creator !== 'function') {
            throw new Error(`Invalid provider configuration for ${config.provider}`);
        }

        return creator({
            apiKey: config.apiKey,
            ...providerInfo.additional
        });
    } catch (error) {
        throw new Error(`Failed to initialize AI provider: ${error}`);
    }
};

const executeGitCommand = (command: string): void => {
    try {
        execSync(command, {stdio: 'inherit'});
    } catch (error) {
        throw new Error(`Git command failed: ${error}`);
    }
};

const confirmAction = async (message: string): Promise<boolean> => {
    const response = await Enquirer.prompt<{ confirm: boolean }>({
        type: 'confirm',
        name: 'confirm',
        message,
    });
    return response.confirm;
};

const addAndCommit = async (commitMessage: string): Promise<void> => {
    const shouldProceed = await confirmAction('Do you want to add and commit these changes?');
    if (!shouldProceed) return process.exit(0);

    try {
        executeGitCommand('git add .');
        executeGitCommand(`git commit -m "${commitMessage}`);
        console.log('✅ Changes committed successfully');
    } catch (error) {
        console.error('❌ Failed to commit changes:', error);
        throw error;
    }
};

const pushChanges = async (): Promise<void> => {
    const shouldPush = await confirmAction('Do you want to push the changes?');
    if (!shouldPush) return;

    try {
        executeGitCommand('git push');
        console.log('✅ Changes pushed successfully');
    } catch (error) {
        console.error('❌ Failed to push changes:', error);
        throw error;
    }
};

export async function generateCommitMessage(): Promise<void> {
    try {
        // Load and validate configuration
        const config = await loadConfig(ensureConfigFile());

        // Initialize AI provider
        const aiProvider = await initializeAIProvider(config);

        // Get git diff
        const diff = getDiff();
        if (!diff.trim()) {
            console.log('No Changes Detected.');
            return;
        }

        // Generate commit message
        const result = await generateText({
            model: aiProvider(config.model),
            prompt: `${COMMIT_PROMPT}\n${diff}`,
        });

        const commitMessage = result.text.trim();
        console.log('\nGenerated commit message:');
        console.log(commitMessage);

        // Handle git operations
        await addAndCommit(commitMessage);
        await pushChanges();

    } catch (error) {
        console.error('Error:', error);
        process.exit(1);
    }
}

// index.ts
// @ts-ignore Types are not availible
import args_parser from 'args-parser';
import type {ArgsType} from "./types";
import {configure} from "./configure";
import {doesConfigFileExist} from "./utils";
import {generateCommitMessage} from "./generate";

const args: ArgsType = args_parser(process.argv);

if (args.config) {
    configure().then(() => {
        console.log('Configuration complete!');
        process.exit(0);
    });
} else if (!doesConfigFileExist()) {

    console.warn('Configuration file does not exist. Please run the following command to configure the application:');
    console.warn('git-cmg config');
    process.exit(1);
} else {

generateCommitMessage().then(r => console.log("Goodbye!"));
}


// ot.txt
// configure.ts
import Enquirer from 'enquirer';
import Providers from "./providers";
import {ensureConfigFile} from "./utils";
import fs from "fs";

export async function configure() {


    const {provider} = await Enquirer.prompt<{ provider: keyof typeof Providers }>({
        type: 'select',
        name: 'provider',
        message: 'Please Choose AI Provider:',
        choices: Object.keys(Providers)
    });

    const {model, apiKey} = await Enquirer.prompt<{ model: string, apiKey: string }>([{
        type: 'select',
        name: 'model',
        message: 'Please Choose Model:',
        choices: Providers[provider].models
    }, {
        type: "password",
        name: "apiKey",
        message: "Please enter your API Key:"
    }]);

    const configFilePath = ensureConfigFile();

    // Writing
    fs.writeFileSync(configFilePath, JSON.stringify({
        provider,
        model,
        apiKey
    }, null, 2));

    console.log(`Configuration saved to ${configFilePath}`);
}

// generate.ts
import {ensureConfigFile} from "./utils";
import {generateText} from "ai";
import {execSync} from "node:child_process";
import {readFile} from "fs/promises";
import {z} from "zod";
import providers from "./providers";
import Enquirer from 'enquirer';

// Constants
const COMMIT_PROMPT = `Your job is to write GitHub commit for this diff. Only send the commit message. Format:

[<type>] <Title>
- Detail 1
- Detail 2
- Detail 3
- Details 4
... <Conclusion>

Make sure to include the type of commit (feat, fix, docs, style, refactor, test, chore etc...) in square brackets.
Make sure you follow format strictly unless told otherwise.
Make sure message is well detailed and has every change mentioned in the diff.
*If no diff is there, send 'No Changed Detected.'*`;

// Config validation schema
const configSchema = z.object({
    provider: z.string(),
    model: z.string(),
    apiKey: z.string()
});

// Helper functions
const getDiff = (): string => {
    try {
        return execSync("git --no-pager diff", {encoding: 'utf8'});
    } catch (error) {
        throw new Error(`Failed to get git diff: ${error}`);
    }
};

const loadConfig = async (configPath: string) => {
    try {
        const configData = await readFile(configPath, 'utf8');
        const config = JSON.parse(configData);
        return configSchema.parse(config);
    } catch (error) {
        throw new Error(`Failed to load config: ${error}`);
    }
};

const initializeAIProvider = async (config: z.infer<typeof configSchema>) => {
    try {
        const providerInfo = providers[config.provider as keyof typeof providers];
        if (!providerInfo) {
            throw new Error(`Unsupported provider: ${config.provider}`);
        }

        const providerPkg = await import(`@ai-sdk/${providerInfo.id}`);
        const creatorName = `create${config.provider.replace(/\s/g, '')}`;
        const creator = providerPkg[creatorName];

        if (typeof creator !== 'function') {
            throw new Error(`Invalid provider configuration for ${config.provider}`);
        }

        return creator({
            apiKey: config.apiKey,
            ...providerInfo.additional
        });
    } catch (error) {
        throw new Error(`Failed to initialize AI provider: ${error}`);
    }
};

const executeGitCommand = (command: string): void => {
    try {
        execSync(command, {stdio: 'inherit'});
    } catch (error) {
        throw new Error(`Git command failed: ${error}`);
    }
};

const confirmAction = async (message: string): Promise<boolean> => {
    const response = await Enquirer.prompt<{ confirm: boolean }>({
        type: 'confirm',
        name: 'confirm',
        message,
    });
    return response.confirm;
};

const addAndCommit = async (commitMessage: string): Promise<void> => {
    const shouldProceed = await confirmAction('Do you want to add and commit these changes?');
    if (!shouldProceed) return process.exit(0);

    try {
        executeGitCommand('git add .');
        executeGitCommand(`git commit -m "${commitMessage}`);
        console.log('✅ Changes committed successfully');
    } catch (error) {
        console.error('❌ Failed to commit changes:', error);
        throw error;
    }
};

const pushChanges = async (): Promise<void> => {
    const shouldPush = await confirmAction('Do you want to push the changes?');
    if (!shouldPush) return;

    try {
        executeGitCommand('git push');
        console.log('✅ Changes pushed successfully');
    } catch (error) {
        console.error('❌ Failed to push changes:', error);
        throw error;
    }
};

export async function generateCommitMessage(): Promise<void> {
    try {
        // Load and validate configuration
        const config = await loadConfig(ensureConfigFile());

        // Initialize AI provider
        const aiProvider = await initializeAIProvider(config);

        // Get git diff
        const diff = getDiff();
        if (!diff.trim()) {
            console.log('No Changes Detected.');
            return;
        }

        // Generate commit message
        const result = await generateText({
            model: aiProvider(config.model),
            prompt: `${COMMIT_PROMPT}\n${diff}`,
        });

        const commitMessage = result.text.trim();
        console.log('\nGenerated commit message:');
        console.log(commitMessage);

        // Handle git operations
        await addAndCommit(commitMessage);
        await pushChanges();

    } catch (error) {
        console.error('Error:', error);
        process.exit(1);
    }
}

// index.ts
// @ts-ignore Types are not availible
import args_parser from 'args-parser';
import type {ArgsType} from "./types";
import {configure} from "./configure";
import {doesConfigFileExist} from "./utils";
import {generateCommitMessage} from "./generate";

const args: ArgsType = args_parser(process.argv);

if (args.config) {
    configure().then(() => {
        console.log('Configuration complete!');
        process.exit(0);
    });
} else if (!doesConfigFileExist()) {

    console.warn('Configuration file does not exist. Please run the following command to configure the application:');
    console.warn('git-cmg config');
    process.exit(1);
} else {

generateCommitMessage().then(r => console.log("Goodbye!"));
}



// providers.ts
export default {
    OpenAI: {
        id: "openai",
        models: ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-4"],
        additional: {}
    },
    Anthropic: {
        id: "anthropic",
        models: ["claude-3-5-sonnet-20241022", "claude-3-5-sonnet-20240620", "claude-3-5-haiku-20241022"],
        additional: {}
    },
    "Google Generative AI": {
        id: "google",
        models: ["gemini-1.5-flash", "gemini-1.5-pro"],
        additional: {}
    },
    "Google Vertex": {
        id: "google-vertex",
        models: ["gemini-2.0-flash-exp", "gemini-1.5-flash", "gemini-1.5-pro"],
        additional: {}
    },
    Groq: {
        id: "groq",
        models: ["llama-3.3-70b-versatile", "llama-3.1-8b-instant", "mixtral-8x7b-32768", "gemma2-9b-it"],
        additional: {}
    },
    Perplexity: {
        id: "openai",
        models: ["llama-3.1-sonar-small-128k-online", "llama-3.1-sonar-large-128k-online", "llama-3.1-sonar-huge-128k-online"],
        additional: {
            name: 'perplexity',
            baseURL: 'https://api.perplexity.ai/',
        }
    }

}

// types.ts
export type ArgsType  = {
    config: boolean
};

// utils.ts
import * as path from 'path';
import * as os from 'os';
import * as fs from 'fs';

// Determine the appropriate directory for storing config files
function getConfigDirectory(appName: string): string {
    const homeDir = os.homedir();

    if (process.platform === 'win32') {
        // Windows: Use the %APPDATA% directory
        return path.join(process.env.APPDATA || path.join(homeDir, 'AppData', 'Roaming'), appName);
    } else if (process.platform === 'darwin') {
        // macOS: Use ~/Library/Application Support
        return path.join(homeDir, 'Library', 'Application Support', appName);
    } else {
        // Linux/Unix: Use ~/.config
        return path.join(process.env.XDG_CONFIG_HOME || path.join(homeDir, '.config'), appName);
    }
}

// Create the config.json file if it doesn't exist and return the file path
export function ensureConfigFile(): string {
    const configDir = getConfigDirectory('Git Commit Message Generator');
    const configFilePath = path.join(configDir, 'config.json');

    // Check if the directory exists, if not, create it
    if (!fs.existsSync(configDir)) {
        fs.mkdirSync(configDir, { recursive: true });
    }

    // Check if the config file exists, if not, create it with an empty object
    if (!fs.existsSync(configFilePath)) {
        fs.writeFileSync(configFilePath, JSON.stringify({}, null, 2));
    }

    return configFilePath;
}

export function doesConfigFileExist(): boolean {
    const configDir = getConfigDirectory('Git Commit Message Generator');
    const configFilePath = path.join(configDir, 'config.json');

    return fs.existsSync(configFilePath);
}


